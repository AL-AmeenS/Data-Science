import numpy as np
from sklearn import datasets,preprocessing,neighbors
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,confusion_matrix

%matplotlib inline
iris = load_iris()
print("iris data")
print(iris)
print("\n")
print("Iris features names")
print("\n")
print(iris.feature_names)
print("\n")
print("Integers representing features(0=setosa,1=versicolor,2=virginica)")
print("\n")
print(iris.target)
print("\n")
print("3 classes of target")
print("\n")
print(iris.target_names)
print("\n")
print("total of 150 observation and 4 features")
print("\n")
print(iris.data.shape)
print("\n")
x,y=iris.data[: , :],iris.target
x_train,x_test,y_train,y_test = train_test_split(x,y,stratify=y,random_state=0,train_size=0.7)
print("shape of train and test objects")
print("\n")
print(x_train.shape)
print(x_test.shape)
print("\n")
print("shape of new y objects")
print("\n")
print("y_train.shape")
print("y_test.shape")
print("\n")
print("training data before preprocessing")
print(x_train)
print("\n")
scalar = preprocessing.standardscalar().fit(x_train)
x_train=scalar.transform(x_train)
print("display scaled data")
print("\n")
print(x_train)
